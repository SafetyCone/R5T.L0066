using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using R5T.T0132;


namespace R5T.L0066
{
    [FunctionalityMarker]
    public partial interface IEqualityOperator : IFunctionalityMarker
    {
        public EqualityComparer<T> Get_EqualityComparer_DefaultForType<T>()
            => EqualityComparer<T>.Default;

        /// <summary>
        /// Gets an equality comparer for a type argument.
        /// </summary>
        /// <remarks>
        /// Uses reflection to get an equality comparer, so this might be slow.
        /// </remarks>
        public IEqualityComparer Get_EqualityComparer_ForType(Type type)
        {
            // Generated by Grok, 20241112.

            // Get the generic type definition of EqualityComparer<T>
            Type genericType = typeof(EqualityComparer<>);

            // Create the specific EqualityComparer<T> for the given type
            Type comparerType = genericType.MakeGenericType(type);

            // Use reflection to get the property info for the "Default" property
            var default_StaticProperty = comparerType.GetProperty(
                Instances.PropertyNames.Default,
                BindingFlags.Public | BindingFlags.Static);

            // Return the value of the Default property as IEqualityComparer
            var output = default_StaticProperty.GetValue(null) as IEqualityComparer;
            return output;
        }

        /// <summary>
        /// Chooses <see cref="Get_EqualityComparer_DefaultForType{T}"/> as the default.
        /// </summary>
        public EqualityComparer<T> Get_EqualityComparer<T>()
            => this.Get_EqualityComparer_DefaultForType<T>();

        /// <inheritdoc cref="INullOperator.NullCheckDeterminesEquality_Else{T}(T, T, Func{T, T, bool})"/>
        public bool NullCheckDeterminesEquality_Else<T>(T a, T b,
            Func<T, T, bool> equality)
            where T : class
            => Instances.NullOperator.NullCheckDeterminesEquality_Else(
                a,
                b,
                equality);
    }
}
